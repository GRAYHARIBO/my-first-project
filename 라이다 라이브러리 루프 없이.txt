import matplotlib.pyplot as plt
import numpy as np
import time
from pyrplidar import PyRPlidar

PORT_NUM = "COM4"   # Fix Me
MAX_DATA = 2000   # 2000마다 데이터 띄움
DIS_UP = 1000   # 1000mm
DIS_DOWN = 50
ANGLE_UP = 45
ANGLE_DOWN = -45    
ROT = 84

class libLIDAR(object):

    #Lidar -> theta, r =====================================================
    def __init__(self):
        self.rpm = 0
        self.lidar = PyRPlidar()
        self.ang=np.array([0])
        self.dis=np.array([0]) 
        self.rtheta=np.zeros((2,2))

        ###### plot initialize #####
        plt.ion()
        self.fig = plt.figure(figsize=(8,8))
        self.ax = self.fig.add_subplot(projection='polar')
        plt.title('Graph Title', fontweight='bold', fontsize=20)
        plt.ylim(0,DIS_UP)
        c = self.ax.scatter(self.ang,self.dis, c='red', s=5)

        ##### Lidar Initialize #####
        self.lidar.connect(port=PORT_NUM, baudrate=115200, timeout=3) 
        self.lidar.set_motor_pwm(660)
        self.scan_generator = self.lidar.start_scan_express(3)

    def scanning(self):  # yield data.T (= np.array([ang,dis])의 전치행렬)

        angle=0
        distance=0

        ###### Loop ######
        for scan in self.scan_generator():
            scan = vars(scan)
            angle = np.array(scan["angle"])
            distance = np.array(scan["distance"])
            # print("Angle= " + str(angle) + ", Distance= " + str(distance))

            break

        if len(self.ang) > MAX_DATA :
            ###### plot update #####
            self.fig.canvas.flush_events()
            self.ax.cla()
            c = self.ax.scatter((-self.ang-ROT)*np.pi/180,self.dis, c='red', s=5)
            plt.ylim(0,DIS_UP)
            plt.title('Graph Title', fontweight='bold', fontsize=20)
            plt.title("Time : " + str(time.strftime('%M:%S', time.localtime(time.time()))), loc='right', pad=20)  ## +" / Count : " +str(count)
            self.ax.plot(np.array([ANGLE_UP,0])*np.pi/180, [DIS_UP,0], color='b', linewidth=2, linestyle='solid') ## range bar
            self.ax.plot(np.array([ANGLE_DOWN,0])*np.pi/180, [DIS_UP,0], color='b', linewidth=2, linestyle='solid') ## range bar
            self.fig.canvas.draw()
            
            data=np.array([(-self.ang-ROT),self.dis])
            self.rtheta = data.T

            self.ang=np.array([0])
            self.dis=np.array([0]) 
        else :
            self.ang = np.append(self.ang, angle)
            self.dis = np.append(self.dis, distance)

            data=np.array([(-self.ang-ROT),self.dis])



        print(len(self.ang))


        #LiDAR & Camera Fusion====================================================
        ##### Filtering Data #####
        thetamin = 45; thetamax = 315  #FOV [Degrees]
        rmin = DIS_DOWN; rmax = DIS_UP  #Distance [mm] 

        rtheta=self.rtheta
        for i in range(rtheta.shape[0]):
            if (rtheta[i,0] > thetamin) and (rtheta[i,0] < thetamax):
                rtheta[i,:] = np.nan

        rtheta[:,0] = rtheta[:,0]*np.pi/180  #degree to radian

        for i in range(np.shape(rtheta)[0]):
            if (rtheta[i,1] < rmin) or (rtheta[i,1] >= rmax):
                rtheta[i,:] = np.nan 


        #Polar -> Cartesian-------------------------------------------------------

        y_s = 0     #lidar height set to 0
        
        coor = np.zeros((rtheta.shape[0],3)) #(x*,y*,z*) [mm]
        for i in range(rtheta.shape[0]):
            if rtheta[i,0] == np.nan:
                coor[i,:] = np.nan
            else:
                coor[i,0] = -rtheta[i,1]*np.sin(rtheta[i,0])
                coor[i,1] = y_s
                coor[i,2] = rtheta[i,1]*np.cos(rtheta[i,0])
        
        trans_vec = [0,170,20]     #lidar to camera vector

        for i in range(3):
            coor[:,i] = coor[:,i] + trans_vec[i]    #to camera 3D space


        #Cartesian -> Pixel-------------------------------------------------------

        #1920x1080
        cam_mat1 = [[1.39697095e+03, 0.00000000e+00, 1.00983541e+03],
        [0.00000000e+00, 1.39632273e+03, 5.26933739e+02],
        [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]

        #640x480
        cam_mat2 = [[622.39801669,   0,         327.82995341],
        [  0,         617.28766013, 261.42463435],
        [  0,           0           , 1        ]]
        
        pix_coor = np.zeros((rtheta.shape[0],3))
        pix = np.zeros((rtheta.shape[0],2))    #pixel space

        for i in range(rtheta.shape[0]):   #(x,y,z) to (u,v)
            pix_coor[i,2] = coor[i,2]
            pix_coor[i,0] = cam_mat2[0][0]*coor[i,0] + cam_mat2[0][2]*coor[i,2]
            pix_coor[i,1] = cam_mat2[1][1]*coor[i,1] + cam_mat2[1][2]*coor[i,2]
            
            pix[i,0] = pix_coor[i,0]/pix_coor[i,2]
            pix[i,1] = pix_coor[i,1]/pix_coor[i,2]
        
        for i in range(rtheta.shape[0]):
            pix[i,0] = round(pix[i,0],0)
            pix[i,1] = round(pix[i,1],0)

        return pix, rtheta[:,1]

    
